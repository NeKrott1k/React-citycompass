            <div className="slider__item">
                <img src={slide1} alt="" className="slider__img" />
                <div className="slider__text-container">
                    <h1 className="slider__count">1.</h1>
                    <h2 className="slider__title">Исторические корни</h2>
                    <p className="slider__text">Железноводск был основан в 1803 году как курортное место, благодаря своим целебным минеральным источникам. Город получил свое название от железистых вод, которые считались особенно полезными для здоровья.</p>
                </div>
            </div>
    
            <div className="slider__item">
                <img src={slide2} alt="" className="slider__img" />
                <div className="slider__text-container">
                    <h1 className="slider__count">2.</h1>
                    <h2 className="slider__title">Курортная история</h2>
                    <p className="slider__text">Железноводск известен своими бальнеологическими курортами, где люди приезжают лечить различные заболевания. Курорты города славятся своими минеральными источниками, которые содержат множество полезных минералов и микроэлементов.</p>
                </div>
            </div>
    
            <div className="slider__item">
                <img src={slide3} alt="" className="slider__img" />
                <div className="slider__text-container">
                    <h1 className="slider__count">3.</h1>
                    <h2 className="slider__title">Архитектурное наследие</h2>
                    <p className="slider__text">Железноводск имеет множество исторических зданий, включая санатории и парковую инфраструктуру, построенные в конце 19 – начале 20 века. Эти постройки имеют уникальную архитектуру и добавляют города атмосферу старинного курорта.</p>
                </div>
            </div>
    
            <div className="slider__item">
                <img src={slide4} alt="" className="slider__img" />
                <div className="slider__text-container">
                    <h2 className="slider__title1">Факт о М. Ю. Лермонтове</h2>
                    <h1 className="slider__count">4.</h1>
                    <h2 className="slider__title">Связь с Кавказским краем</h2>
                    <p className="slider__text">Михаил Юрьевич Лермонтов провел большую часть своей жизни на Кавказе, где написал многие свои известные произведения, такие как "Герой нашего времени" и "Демон".</p>
                </div>
            </div>



    const GalleryKeyNavigate = () => {
        useEffect(() => {
            const handleKeyDown = (event) => {
                if (event.key === 'ArrowRight') {
                    GalleryNext()
                } else if (event.key === 'ArrowLeft') {
                    GalleryPrev()
                } else if (event.key === 'Escape') {
                    toggleGallery()
                }
            }

            document.addEventListener('keydown', handleKeyDown)

            return () => {
                document.removeEventListener('keydown', handleKeyDown)
            }
        }, [])

        return () => {
            <>
                <h1>Press any key and check the console</h1>
            </>
        }
    }



    // const [loading, setLoading] = useState(false)
    // const [attractions, setAttractions] = useState([])
    // const [isActive, setIsActive] = useState(false)
    // const [pageCount, setPageCount] = useState(1)
    // const [isSorted, setIsSorted] = useState(false)

    const baseUrl = 'https://67319f907aaf2a9aff113edb.mockapi.io/attraction'
    const itemsPerPage = 12
    const navigate = useNavigate()

    const dataFetch = useCallback(async () => {
        setLoading(true)
        try {
            const response = await fetch(
            `${baseUrl}?page=${pageCount}&limit=${itemsPerPage}${isSorted ? '&sortBy=name_place' : ''}${selectedCategory ? `&search=${selectedCategory}` : ''}`
        )
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`)
        }

        const newAttractions = await response.json()
        if (newAttractions.length < itemsPerPage) {
            setHasMore(false)
        }
        setAttractions((prevAttraction) => [...prevAttraction, ...newAttractions])
        } catch(error) {
            console.error('Ошибка', error)
            
        } finally {
            setTimeout(() => {
                setLoading(false) 
            }, 1000);
        }

    }, [pageCount, isSorted, selectedCategory])

    useEffect(() => {
        dataFetch()
    }, [dataFetch])


    const handleClick = () => {
        setIsActive(!isActive)
    }

    const handleShowMore = () => {
        if (hasMore) {
            setPageCount((prevPageCount) => prevPageCount + 1);
        }
    }

    const handleSort = () => {
        setIsSorted((prev) => !prev)
        setPageCount(1)
        setAttractions([])
        setHasMore(true)
    }

    const handleFilter = (event) => {
        setSelectedCategory(event.target.value)
        setPageCount(1)
        setAttractions([])
        setHasMore(true)
    }

    const handlePrevPage = () => {
        if (pageCount > 1) {
            setAttractions((...prevAttraction) => [...prevAttraction])
            setPageCount((prevPageCount) => prevPageCount - 1)
        } 
        if (pageCount === 1) {
            setPageCount(1)
            setAttractions(attractions)
        }
    }

    const handleNextPage = () => {
        setAttractions((...prevAttraction) => [...prevAttraction])
        setPageCount((prevPageCount) => prevPageCount + 1)
    }











attraction_dop

    // const [currentIndexImg, setCurrentIndexImg] = useState(0)
    // useEffect(() => {
    //     const fetchAttraction = async() => {
    //         try {
    //             const response = await fetch(`${baseUrl}/${id}`)
    //             if (!response.ok) {
    //                 throw new Error(`HTTP error! status: ${response.status}`)
    //             }
    //             const data = await response.json()
    //             setAttraction(data)

    //         } catch(error) {
    //             console.error('Ошибка', error)
    //         } finally {
    //             setLoading(false)
    //         }
    //     }
    //     fetchAttraction()
    // }, [id])


    // useEffect(() => {
    //     const fetchReviews = async() => {
    //         try {
    //             const response = await axios.get(`${reviewUrl}/reviews?attraction_id=${id}`)
    //             setReviews(response.data)
    //         } catch (error) {
    //             console.error('Ошибка с отзывами', error)
    //         }
    //     }
    
    //     fetchReviews()
    // }, [id])